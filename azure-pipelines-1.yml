# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

# parameters:
# - name: someString
#   type: string
#   default: "HELLO"    

# variables:
#    A: ${{ lower(parameters.someString) }}

# steps:
#   - script: echo $A # outputs hello
variables:
  - name: BRANCH_NAME
    ${{ if eq( variables['Build.Reason'], 'PullRequest' ) }}:
      value: "$(System.PullRequest.SourceBranch)"
    ${{ else }}:
      value: "feature/$(Build.SourceBranchName)"
  - name: COMMIT_ID
    ${{ if eq( variables['Build.Reason'], 'PullRequest' ) }}:
      value: $(system.pullRequest.sourceCommitId)
    ${{ else }}:
      value: $(Build.SourceVersion)
  
  # - name: Push_Param
  #   ${{ if eq(variables['BRANCH_NAME'], 'master') }}:
  #     value: "$(BRANCH_NAME)/latest"
  #   ${{ else }}:
  #     value: "$(BRANCH_NAME)/$(COMMIT_ID)"
    
  - name: Pull_Param
    value: $(BRANCH_NAME)/latest
  
  - name: PreviousStageExecuted
    value: false
    

jobs:
- job: LowerCase
  steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "BRANCH_NAME: $(BRANCH_NAME)"
          echo "COMMIT_ID: $(COMMIT_ID)"
          # echo $(Pull_Param) | tr '[:upper:]' '[:lower:]'
          if [ "$(PreviousStageExecuted)" == "false" ]; then
            Pull_Param="$(BRANCH_NAME)/$(COMMIT_ID)"
            echo "##vso[task.setvariable variable=Pull_Param]$Pull_Param"
            echo "if true $(Pull_Param)"
            echo "This should print Branch/commitid"
          fi
          echo "else $(Pull_Param)"
          echo "This should print Branch/latest"
    # - template: /Container-build.yml



#This Works!
# variables:
#   - name: BRANCH_NAME
#     ${{ if eq( variables['Build.Reason'], 'PullRequest' ) }}:
#       value: "$(System.PullRequest.SourceBranch)"
#     ${{ else }}:
#       value: "feature/$(Build.SourceBranchName)"

# jobs:
# - job: LowerCase
#   variables:
#     # Define a new variable that holds the lowercased value of BRANCH_NAME
#     - name:  LOWER_BRANCH_NAME
#       value: ${{ lower(variables.BRANCH_NAME) }}
#   steps:
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: |
#           echo $(LOWER_BRANCH_NAME) | tr '[:upper:]' '[:lower:]'



  displayName: 'Print lowercase string'

